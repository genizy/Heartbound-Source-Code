<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_generic</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_investigate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
selected_button = 0;
text_location = 0;
talk_distance = 10;
cur_message = 1;
question_true = 1;
question_asked = 0;
question_answered = 0;

if (!instance_exists(obj_textbox))
    instance_create(x, y, obj_textbox);

global.player_frozen = 1;
global.current_menu = 2;
global.menu_active = 1;
global.cursor_active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (obj_controls_decline)
    instance_destroy();

with (obj_controls_accept)
    instance_destroy();

obj_controls_display.control_selected = 0;
global.gamepad_connected = 0;
obj_controls_display.image_index = global.gamepad_connected;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.menu_active = 1;
global.current_menu = 4;
global.cursor_active = 1;
global.player_frozen = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other.id)
{
    if (global.player_frozen == 1 &amp;&amp; global.menu_active == 1)
    {
        if (global.current_menu == 1)
        {
            switch (obj_controls_display.control_selected)
            {
                case 0:
                    button_index[0] = 96;
                    button_index[1] = 97;
                    total_buttons = array_length_1d(button_index) - 1;
                    break;
                
                case 1:
                    button_index[0] = 99;
                    button_index[1] = 98;
                    total_buttons = array_length_1d(button_index) - 1;
                    break;
            }
            
            for (xx = 0; xx &lt;= total_buttons; xx++)
            {
                if (instance_exists(button_index[xx]))
                    button_index[xx].activated = 0;
            }
            
            if (global.gamepad_connected == 0)
            {
                for (xx = 0; xx &lt;= total_buttons; xx++)
                {
                    if (instance_exists(button_index[xx]))
                    {
                        if (position_meeting(mouse_x, mouse_y, button_index[xx]))
                        {
                            button_index[xx].activated = 1;
                            
                            if (global.accept_key)
                            {
                                switch (obj_controls_display.control_selected)
                                {
                                    case 0:
                                        switch (xx)
                                        {
                                            case 0:
                                                instance_create(448, 160, obj_controls_decline);
                                                instance_create(576, 160, obj_controls_accept);
                                                global.gamepad_connected = 0;
                                                break;
                                            
                                            case 1:
                                                instance_create(448, 288, obj_controls_decline);
                                                instance_create(576, 288, obj_controls_accept);
                                                global.gamepad_connected = 1;
                                                alarm[1] = room_speed * 5;
                                                break;
                                        }
                                        
                                        button_index[0] = 99;
                                        button_index[1] = 98;
                                        total_buttons = array_length_1d(button_index) - 1;
                                        obj_controls_display.control_selected = 1;
                                        obj_controls_display.image_index = global.gamepad_connected;
                                        break;
                                    
                                    case 1:
                                        switch (xx)
                                        {
                                            case 0:
                                                with (obj_controls_decline)
                                                    instance_destroy();
                                                
                                                with (obj_controls_accept)
                                                    instance_destroy();
                                                
                                                obj_controls_display.control_selected = 0;
                                                break;
                                            
                                            case 1:
                                                with (instance_create(x, y, obj_fade_menu))
                                                {
                                                    next_room = room_next(room);
                                                    next_color = 0;
                                                    fadein_timer = 0.01;
                                                    fadeout_timer = 0.01;
                                                    fadepause_timer = 0.01;
                                                    fadeout_amount = 0.05;
                                                    fadein_amount = 0.05;
                                                    fade_out = 1;
                                                    alarm[1] = room_speed * fadeout_timer;
                                                }
                                                
                                                global.current_menu = 0;
                                                selected_button = 0;
                                                break;
                                        }
                                        
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if (instance_exists(button_index[selected_button]))
                    button_index[selected_button].activated = 1;
                
                if (global.left_key_pressed || global.up_key_pressed)
                {
                    selected_button--;
                    
                    if (selected_button &lt; 0)
                        selected_button = total_buttons;
                }
                
                if (global.right_key_pressed || global.down_key_pressed)
                {
                    selected_button++;
                    
                    if (selected_button &gt; total_buttons)
                        selected_button = 0;
                }
                
                if (global.accept_key)
                {
                    alarm[1] = 0;
                    
                    switch (selected_button)
                    {
                        case 0:
                            with (obj_controls_decline)
                                instance_destroy();
                            
                            with (obj_controls_accept)
                                instance_destroy();
                            
                            obj_controls_display.control_selected = 0;
                            global.gamepad_connected = 0;
                            obj_controls_display.image_index = global.gamepad_connected;
                            break;
                        
                        case 1:
                            with (instance_create(x, y, obj_fade_menu))
                            {
                                next_room = room_next(room);
                                next_color = 0;
                                fadein_timer = 0.01;
                                fadeout_timer = 0.01;
                                fadepause_timer = 0.01;
                                fadeout_amount = 0.05;
                                fadein_amount = 0.05;
                                fade_out = 1;
                                alarm[1] = room_speed * fadeout_timer;
                            }
                            
                            global.current_menu = 0;
                            selected_button = 0;
                            break;
                    }
                }
            }
        }
        else if (global.current_menu == 2)
        {
            button_index[0] = 101;
            button_index[1] = 102;
            button_index[2] = 103;
            button_index[3] = 104;
            button_index[4] = 105;
            total_buttons = array_length_1d(button_index) - 1;
            var column_1_min = 0;
            var column_1_max = 2;
            var column_2_min = 3;
            var column_2_max = 4;
            
            for (xx = 0; xx &lt;= total_buttons; xx++)
            {
                if (instance_exists(button_index[xx]))
                    button_index[xx].activated = 0;
            }
            
            if (global.gamepad_connected == 0)
            {
                for (xx = 0; xx &lt;= total_buttons; xx++)
                {
                    if (instance_exists(button_index[xx]))
                    {
                        if (position_meeting(mouse_x, mouse_y, button_index[xx]))
                        {
                            button_index[xx].activated = 1;
                            
                            if (global.accept_key)
                            {
                                switch (xx)
                                {
                                    case 0:
                                        global.game_language = "english";
                                        break;
                                    
                                    case 1:
                                        global.game_language = "PTBR";
                                        break;
                                    
                                    case 2:
                                        global.game_language = "RU";
                                        break;
                                    
                                    case 3:
                                        global.game_language = "FR";
                                        break;
                                    
                                    case 4:
                                        global.game_language = "ESMX";
                                        break;
                                }
                                
                                with (instance_create(x, y, obj_fade_menu))
                                {
                                    next_room = room_next(room);
                                    next_color = 0;
                                    fadein_timer = 0.01;
                                    fadeout_timer = 0.01;
                                    fadepause_timer = 0.01;
                                    fadeout_amount = 0.05;
                                    fadein_amount = 0.05;
                                    fade_out = 1;
                                    alarm[1] = room_speed * fadeout_timer;
                                }
                                
                                global.current_menu = 0;
                                selected_button = 0;
                            }
                        }
                    }
                }
            }
            else
            {
                if (instance_exists(button_index[selected_button]))
                    button_index[selected_button].activated = 1;
                
                if (global.left_key_pressed || global.right_key_pressed)
                {
                    switch (selected_button)
                    {
                        case 0:
                            selected_button = 3;
                            break;
                        
                        case 1:
                            selected_button = 4;
                            break;
                        
                        case 2:
                            selected_button = 2;
                            break;
                        
                        case 3:
                            selected_button = 0;
                            break;
                        
                        case 4:
                            selected_button = 1;
                            break;
                    }
                }
                
                if (global.up_key_pressed)
                {
                    if (selected_button != column_2_min)
                    {
                        selected_button--;
                        
                        if (selected_button &lt; column_1_min)
                            selected_button = column_1_max;
                    }
                    else
                    {
                        selected_button = column_2_max;
                    }
                }
                
                if (global.down_key_pressed)
                {
                    if (selected_button != column_2_max)
                    {
                        if (selected_button == column_1_max)
                            selected_button = column_1_min;
                        else
                            selected_button++;
                    }
                    else
                    {
                        selected_button = column_2_min;
                    }
                }
                
                if (global.accept_key)
                {
                    switch (selected_button)
                    {
                        case 0:
                            global.game_language = "english";
                            break;
                        
                        case 1:
                            global.game_language = "PTBR";
                            break;
                        
                        case 2:
                            global.game_language = "RU";
                            break;
                        
                        case 3:
                            global.game_language = "FR";
                            break;
                        
                        case 4:
                            global.game_language = "ESMX";
                            break;
                    }
                    
                    with (instance_create(x, y, obj_fade_menu))
                    {
                        next_room = room_next(room);
                        next_color = 0;
                        fadein_timer = 0.01;
                        fadeout_timer = 0.01;
                        fadepause_timer = 0.01;
                        fadeout_amount = 0.05;
                        fadein_amount = 0.05;
                        fade_out = 1;
                        alarm[1] = room_speed * fadeout_timer;
                    }
                    
                    global.current_menu = 0;
                    selected_button = 0;
                }
            }
        }
        
        if (global.current_menu == 3 &amp;&amp; global.current_talker != 0)
        {
            button_index[0] = 30;
            button_index[1] = 31;
            total_buttons = array_length_1d(button_index) - 1;
            step_index[0] = global.current_talker.step_1;
            step_index[1] = global.current_talker.step_2;
            
            for (xx = 0; xx &lt;= total_buttons; xx++)
            {
                if (instance_exists(button_index[xx]))
                    button_index[xx].activated = 0;
            }
            
            if (global.text_complete == 1)
            {
                if (instance_exists(button_index[selected_button]))
                    button_index[selected_button].activated = 1;
                
                if (global.left_key_pressed || global.up_key_pressed)
                {
                    selected_button--;
                    
                    if (selected_button &lt; 0)
                        selected_button = total_buttons;
                }
                
                if (global.right_key_pressed || global.down_key_pressed)
                {
                    selected_button++;
                    
                    if (selected_button &gt; total_buttons)
                        selected_button = 0;
                }
                
                if (global.accept_key)
                {
                    global.current_talker.next_step = step_index[selected_button];
                    deactivate_dialog_options();
                    selected_button = 0;
                }
            }
        }
        else if (global.current_menu == 4)
        {
            button_index[0] = 107;
            button_index[1] = 108;
            total_buttons = array_length_1d(button_index) - 1;
            
            for (xx = 0; xx &lt;= total_buttons; xx++)
            {
                if (instance_exists(button_index[xx]))
                    button_index[xx].activated = 0;
            }
            
            if (global.gamepad_connected == 0)
            {
                for (xx = 0; xx &lt;= total_buttons; xx++)
                {
                    if (instance_exists(button_index[xx]))
                    {
                        if (position_meeting(mouse_x, mouse_y, button_index[xx]))
                        {
                            button_index[xx].activated = 1;
                            
                            if (global.accept_key)
                            {
                                switch (xx)
                                {
                                    case 0:
                                        load_game();
                                        global.player_frozen = 1;
                                        global.cursor_active = 0;
                                        fader = instance_create(x, y, obj_fade_start);
                                        
                                        with (fader)
                                        {
                                            if (global.start_room == 13)
                                            {
                                                next_room = 13;
                                                player_x = 0;
                                                player_y = 0;
                                            }
                                            else
                                            {
                                                global.storyline_array[70] = 0;
                                                next_room = 10;
                                                player_x = 0;
                                                player_y = 0;
                                            }
                                            
                                            next_color = 16777215;
                                            fadein_timer = 0.01;
                                            fadeout_timer = 0.02;
                                            fadepause_timer = 0.5;
                                            fadeout_amount = 0.01;
                                            fadein_amount = 0.05;
                                            fade_out = 1;
                                            alarm[1] = room_speed * fadeout_timer;
                                        }
                                        
                                        audio_sound_gain(snd_music_menu_intro, 0, 500);
                                        audio_sound_gain(snd_music_menu_loop, 0, 500);
                                        scr_sound_play(28, 1, 1, 0);
                                        global.menu_active = 0;
                                        break;
                                    
                                    case 1:
                                        global.menu_active = 0;
                                        global.cursor_active = 0;
                                        button_index[xx].activated = 0;
                                        selected_button = 0;
                                        activate_dialog();
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if (instance_exists(button_index[selected_button]))
                    button_index[selected_button].activated = 1;
                
                if (instance_exists(button_index[1]))
                {
                    if (global.left_key_pressed || global.up_key_pressed)
                    {
                        selected_button--;
                        
                        if (selected_button &lt; 0)
                            selected_button = total_buttons;
                    }
                    
                    if (global.right_key_pressed || global.down_key_pressed)
                    {
                        selected_button++;
                        
                        if (selected_button &gt; total_buttons)
                            selected_button = 0;
                    }
                }
                
                if (global.accept_key)
                {
                    switch (selected_button)
                    {
                        case 0:
                            load_game();
                            global.player_frozen = 1;
                            global.cursor_active = 0;
                            fader = instance_create(x, y, obj_fade_start);
                            
                            with (fader)
                            {
                                if (global.start_room == 13)
                                {
                                    next_room = 13;
                                    player_x = 0;
                                    player_y = 0;
                                }
                                else
                                {
                                    global.storyline_array[70] = 0;
                                    next_room = 10;
                                    player_x = 0;
                                    player_y = 0;
                                }
                                
                                next_color = 16777215;
                                fadein_timer = 0.01;
                                fadeout_timer = 0.02;
                                fadepause_timer = 0.5;
                                fadeout_amount = 0.01;
                                fadein_amount = 0.05;
                                fade_out = 1;
                                alarm[1] = room_speed * fadeout_timer;
                            }
                            
                            audio_sound_gain(snd_music_menu_intro, 0, 500);
                            audio_sound_gain(snd_music_menu_loop, 0, 500);
                            scr_sound_play(28, 1, 1, 0);
                            global.menu_active = 0;
                            break;
                        
                        case 1:
                            global.menu_active = 0;
                            selected_button = 0;
                            activate_dialog();
                            break;
                    }
                }
            }
        }
        else if (global.current_menu == 5)
        {
            button_index[0] = 568;
            button_index[1] = 569;
            button_index[2] = 570;
            total_buttons = array_length_1d(button_index) - 1;
            
            for (xx = 0; xx &lt;= total_buttons; xx++)
            {
                if (instance_exists(button_index[xx]))
                    button_index[xx].activated = 0;
            }
            
            if (global.gamepad_connected == 0)
            {
                for (xx = 0; xx &lt;= total_buttons; xx++)
                {
                    if (instance_exists(button_index[xx]))
                    {
                        if (position_meeting(mouse_x, mouse_y, button_index[xx]))
                        {
                            button_index[xx].activated = 1;
                            
                            if (global.accept_key)
                            {
                                switch (xx)
                                {
                                    case 0:
                                        button_index[1].fade_out = 1;
                                        button_index[2].fade_out = 1;
                                        
                                        with (instance_create(420, 500, obj_portals_bookface_tome))
                                            target_portal = other.xx + 1;
                                        
                                        break;
                                    
                                    case 1:
                                        button_index[0].fade_out = 1;
                                        button_index[2].fade_out = 1;
                                        
                                        with (instance_create(320, 500, obj_portals_bookface_tome))
                                            target_portal = other.xx + 1;
                                        
                                        break;
                                    
                                    case 2:
                                        button_index[0].fade_out = 1;
                                        button_index[1].fade_out = 1;
                                        
                                        with (instance_create(220, 500, obj_portals_bookface_tome))
                                            target_portal = other.xx + 1;
                                        
                                        break;
                                }
                                
                                global.menu_active = 0;
                                global.current_menu = 0;
                                global.cursor_active = 0;
                                button_index[xx].activated = 0;
                                selected_button = 0;
                            }
                        }
                    }
                }
            }
            else
            {
                if (instance_exists(button_index[selected_button]))
                    button_index[selected_button].activated = 1;
                
                if (global.left_key_pressed || global.up_key_pressed)
                {
                    selected_button--;
                    
                    if (selected_button &lt; 0)
                        selected_button = total_buttons;
                }
                
                if (global.right_key_pressed || global.down_key_pressed)
                {
                    selected_button++;
                    
                    if (selected_button &gt; total_buttons)
                        selected_button = 0;
                }
                
                if (global.accept_key)
                {
                    switch (selected_button)
                    {
                        case 0:
                            button_index[1].fade_out = 1;
                            button_index[2].fade_out = 1;
                            
                            with (instance_create(420, 500, obj_portals_bookface_tome))
                                target_portal = other.selected_button + 1;
                            
                            break;
                        
                        case 1:
                            button_index[0].fade_out = 1;
                            button_index[2].fade_out = 1;
                            
                            with (instance_create(320, 500, obj_portals_bookface_tome))
                                target_portal = other.selected_button + 1;
                            
                            break;
                        
                        case 2:
                            button_index[0].fade_out = 1;
                            button_index[1].fade_out = 1;
                            
                            with (instance_create(220, 500, obj_portals_bookface_tome))
                                target_portal = other.selected_button + 1;
                            
                            break;
                    }
                    
                    global.menu_active = 0;
                    global.current_menu = 0;
                    global.cursor_active = 0;
                    button_index[selected_button].activated = 0;
                    selected_button = 0;
                }
            }
        }
    }
    
    button_index = 0;
    step_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (talking_state == 0)
{
    scr_talk();
}
else
{
    if (question_true == 1 &amp;&amp; question_asked == 0)
    {
        question_asked = 1;
        activate_dialog_options(1, 2);
    }
    
    if (global.current_talker == object_index)
    {
        if (options_state == 0)
        {
            if ((global.accept_key &amp;&amp; global.text_complete == 1) || question_answered == 1)
            {
                question_answered = 0;
                global.text_complete = 0;
                
                switch (next_step)
                {
                    case 1:
                        question_asked = 0;
                        end_dialog();
                        selected_button = 1;
                        alarm[0] = 5;
                        break;
                    
                    case 2:
                        next_step = 3;
                        cur_message = 2;
                        question_true = 0;
                        question_asked = 0;
                        activate_dialog();
                        
                        with (obj_button_continue)
                            x = 320;
                        
                        with (obj_button_delete)
                            instance_destroy();
                        
                        clear_game();
                        load_game();
                        break;
                    
                    case 3:
                        cur_message = 1;
                        question_true = 1;
                        end_dialog();
                        selected_button = 0;
                        alarm[0] = 5;
                        break;
                }
            }
        }
        else if (global.text_complete == 1)
        {
            global.text_complete = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints />
</object>
