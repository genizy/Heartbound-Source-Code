<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_effects</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>obj_roomdark_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>object_color = 10485588;
shadow_level = 1;
shadow_bind = 60;
shadow_min = 20;
global.shadow_surface = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_lightbulb_parent))
{
    if (instance_exists(obj_player_parent))
    {
        var selected_lightbulb = instance_nearest(obj_player_parent.x, obj_player_parent.y + 20, obj_lightbulb_parent);
        
        with (selected_lightbulb)
        {
            var shadow_distance = point_distance(x, y, obj_player_parent.x, obj_player_parent.y + 20);
            
            if (shadow_distance &lt;= other.shadow_bind)
            {
                shadow_value = shadow_distance / other.shadow_bind;
                other.shadow_level = shadow_value;
                
                if (shadow_distance &lt;= other.shadow_min)
                    other.shadow_level = 0;
                
                if (instance_exists(obj_ironmines1_music))
                {
                    with (obj_ironmines1_music)
                        audio_sound_gain(music_ext, (1 - other.shadow_value) * 0.4, 1);
                }
            }
            else
            {
                other.shadow_level = 1;
                
                if (instance_exists(obj_ironmines1_music))
                {
                    with (obj_ironmines1_music)
                        audio_sound_gain(music_ext, 0, 250);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(global.shadow_surface))
    surface_free(global.shadow_surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(global.shadow_surface))
{
    surface_set_target(global.shadow_surface);
    draw_clear_alpha(c_black, 0);
    draw_set_color(c_black);
    draw_set_alpha(shadow_level);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_alpha(1);
    var players_exist = 0;
    
    if (instance_exists(obj_player_parent))
        players_exist = 1;
    
    var lightbulbs_exist = 0;
    
    if (instance_exists(obj_lightbulb_parent))
        lightbulbs_exist = 1;
    
    for (var xx = 3; xx &gt; 0; xx--)
    {
        if (lightbulbs_exist == 1)
        {
            with (obj_lightbulb_parent)
            {
                range_left = (x - light_base_width - (light_step_width * xx)) + light_offset_x + random_range(-1, 1);
                range_right = x + light_base_width + (light_step_width * xx) + light_offset_x + random_range(-1, 1);
                range_top = (y - (light_base_width / 2) - ((light_step_width / 2) * xx)) + light_offset_y + random_range(-1, 1);
                range_bottom = y + (light_base_width / 2) + ((light_step_width / 2) * xx) + light_offset_y + random_range(-1, 1);
                draw_set_blend_mode(bm_subtract);
                draw_ellipse_color(range_left, range_top, range_right, range_bottom, c_black, c_black, 0);
                draw_set_alpha(other.shadow_level * (light_base_shadow + (light_step_shadow * xx)));
                draw_set_blend_mode(bm_normal);
                draw_ellipse_color(range_left, range_top, range_right, range_bottom, c_black, c_black, 0);
                draw_set_alpha(1);
            }
        }
        
        if (lightbulbs_exist == 1)
        {
            with (obj_lightbulb_parent)
            {
                draw_set_blend_mode(bm_subtract);
                
                switch (image_xscale)
                {
                    case 1:
                        draw_sprite_ext(sprite_index, image_index, round(x) + random_range(-1, 1), round(y) + random_range(-1, 1), (image_xscale * 0.8) + (xx * 0.152), (image_yscale * 0.8) + (xx * 0.15), image_angle, c_black, other.shadow_level * (light_base_shadow + light_step_shadow));
                        break;
                    
                    case -1:
                        draw_sprite_ext(sprite_index, image_index, round(x) + random_range(-1, 1), round(y) + random_range(-1, 1), (image_xscale * 0.8) - (xx * 0.15), (image_yscale * 0.8) + (xx * 0.15), image_angle, c_black, other.shadow_level * (light_base_shadow + light_step_shadow));
                        break;
                }
                
                draw_set_blend_mode(bm_normal);
            }
        }
    }
    
    if (players_exist == 1)
    {
        with (obj_player_parent)
        {
            draw_set_blend_mode(bm_subtract);
            draw_sprite_ext(sprite_index, image_index, round(x), round(y), image_xscale, image_yscale, image_angle, c_black, 0.1);
            draw_set_blend_mode(bm_normal);
            draw_sprite_ext(sprite_index, image_index, round(x), round(y), image_xscale, image_yscale, image_angle, c_black, other.shadow_level * light_base_shadow);
        }
    }
    
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    draw_surface(global.shadow_surface, 0, 0);
}
else
{
    global.shadow_surface = surface_create(room_width, room_height);
}

draw_set_blend_mode_ext(9, bm_zero);
draw_rectangle_color(0, 0, room_width, room_height, object_color, object_color, object_color, object_color, 0);
draw_set_blend_mode(bm_normal);

if (instance_exists(obj_player_parent))
{
    with (obj_player_parent)
    {
        draw_set_blend_mode_ext(9, bm_zero);
        draw_ellipse_color(x - 800, y - 400, x + 800, y + 400, c_white, c_black, 0);
        draw_set_blend_mode(bm_normal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints />
</object>
