<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_barghest_pods_pod</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6005</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.1;
angle_modifier = choose(-3, -2, -1, 1, 2, 3);
time_modifier = (obj_combat_parent.selected_diff * 0.2) + (global.storyline_array[107] * 0.2);
speed = random_range(3, 3.5) + time_modifier;
speed = clamp(speed, 3, 4.5);
direction = 270;

if (global.gamepad_connected == 1)
{
    time_modifier = (obj_combat_parent.selected_diff * 0.2) + (global.storyline_array[107] * 0.2);
    speed = 1.5 + time_modifier;
    speed = clamp(speed, 1.5, 2.5);
}

object_selected = 0;
pod_control = 0;
pod_number = 0;
pod_state = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gamepad_connected == 0)
{
    if (global.accept_key)
    {
        if (object_selected == 1)
        {
            if (instance_exists(obj_barghest_pods_game))
            {
                with (obj_barghest_pods_game)
                {
                    attack_defeated += 1;
                    
                    if (attack_defeated == attack_number)
                        alarm[2] = room_speed * 0.5;
                }
            }
            
            if (global.storyline_array[23] == 1)
            {
                global.enemy_hp_check -= 2;
                scr_damage_target(2, 23, other.x, other.y);
            }
            else
            {
                global.enemy_hp_check -= 1;
                scr_damage_target(1, 23, other.x, other.y);
            }
            
            scr_sound_play(168, 0.3, random_range(0.95, 1), 0);
            var death_object = instance_create(x, y, obj_barghest_pods_pod_explosion);
            death_object.image_angle = image_angle;
            instance_destroy();
        }
    }
}

if (y &gt; (obj_view.y + 150))
{
    scr_damage_target(1, 22, x, y);
    scr_screenshake(4, 0.5, 2, obj_combat_parent.camera_x, obj_combat_parent.camera_y);
    scr_sound_play(168, 0.3, random_range(0.95, 1), 0);
    var death_object = instance_create(x, y, obj_barghest_pods_pod_explosion);
    death_object.image_angle = image_angle;
    
    if (pod_state == 0)
    {
        if (instance_exists(obj_barghest_pods_game))
        {
            with (obj_barghest_pods_game)
            {
                attack_defeated += 1;
                
                if (attack_defeated == attack_number)
                    alarm[2] = room_speed * 0.5;
            }
        }
    }
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(global.arena_surface))
{
    surface_set_target(global.arena_surface);
    draw_clear_alpha(c_black, 0);
    image_angle += angle_modifier;
    
    if (global.gamepad_connected == 0)
    {
        if (collision_circle(mouse_x, mouse_y, 5, id, 1, 0))
        {
            d3d_set_fog(true, c_red, 0, 0);
            draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x - 2, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, (round(x) - global.surface_offset_x) + 2, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y - 2, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x, (round(y) - global.surface_offset_y) + 2, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, (round(x) - global.surface_offset_x) + 1, (round(y) - global.surface_offset_y) + 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, (round(x) - global.surface_offset_x) + 1, round(y) - global.surface_offset_y - 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x - 1, (round(y) - global.surface_offset_y) + 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x - 1, round(y) - global.surface_offset_y - 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            d3d_set_fog(false, c_red, 0, 0);
            object_selected = 1;
        }
        else
        {
            object_selected = 0;
        }
    }
    
    draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    
    if (global.gamepad_connected == 1)
        draw_sprite_ext(pod_control, pod_state, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, 0, image_blend, image_alpha);
    
    surface_reset_target();
    draw_surface(global.arena_surface, global.surface_offset_x, global.surface_offset_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints />
</object>
