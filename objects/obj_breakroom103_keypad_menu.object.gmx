<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_office_keypad_blank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0;
color_slice = 255 - (image_alpha * 255);
color_whole = make_color_rgb(color_slice, color_slice, color_slice);
crypto_presses = "";
crypto_win = "8913";
crypto_loss = "1111111";
crypto_secret = "583221496";
crypto_step = 1;
crypto_max = 10;
crypto_solved = 0;
crypto_string[0] = "Y͍̰o̴̙̪u҉̤̰͓ ̙̹͉̼̤͉͇͟t̛͕̬̜h̩̣̬̙̹ͅo̖̥̼u̜̱͉̳̖g̛̻h̸̪͕̺͈̺̩ţ̮̬͎͇̥̰ ̠̩̭̠͡y͎̹o̸͓̝̰ų̫̘̳̗ ̣̝̟̙c̵̰̘̫̠͍̫̝o̟͖̦̤ul̸͖̖̬̮d̡͕̳̖ ̕d͇̯̯͉̜̲ó̯̺ ͕͙t͇̦h͉͍̞̘̳̜͉́i̗̙͇͟s͔ ͖͈̠̺̮̳t̖̦͠o̷͔ ̹̜̰̤m͙͔͖e҉̟?̣̤̫̫̦̪̕";
crypto_string[1] = "͔̜̘̙͎͚J̬̱u͚s͖͙t̶͚̰̦̪͎ ̞̠̖̤̙ͅs̘h̖͚̰̯̥u͙͖̪̝t̺͕͕͚̙ͅ ҉̹͉̣͈͚̠̖m̨e͈ ̰͙o̺͟u̹̫̞͙t̢̪̠̼̖͙ ̣w̳͚̫̝̮̗͠h̻̝̳i̠͍̮̹͡l͈̩͓̯̻͉͜ẹ̳̥͙͎͇͡ y̛̳̫͎ͅo͈͔͇u҉̳̻̰ ̤͚̞͖̲͜s̫̫͓̮̯͜a̦͔̘̼͟ͅv͓͙͈̖e̳͉͉̳̱̱͍d̪̰̮̙ͅ ̢̙̠̳̺͉͍ͅt̰̦̹̺̣͇ͅh͈̰̰̯̻e͚͔̰͜m̲̦̖̜̜͍̘?̟̠̗̩̗";
crypto_string[2] = "T͚̤͈͙ͅh̗̭̝̣i̸͚̟̲͕̹s ̬͕p̵ͅo̧̫̙̗̲w̩̕e̝͈r̪̘̯͇̲̺̟ ̞͍̝̩ͅḭ̛̩̟̻̼̗̯s̵͈͍͙͖̩̬̲ ̶̦̣͔͎n̬͔̝̮͓̳͜ͅo͕͈̱̱̪̙t̥͈̼̺̗͉͓ ̪̜̦̮̭̕ỳ̬o͏̦̟̱̲̥ur̘̝̜̭s̜̥̻̣̹ ҉͎̤̖ͅt̨o̮̮̗͍̲ ͉͢ͅwi̧̘͓͖̞e̻̺̹l͎̤̪̣͇̠̺͟d͍̼̰̝̪̹͖͠.̳̱͖̥̜͟";
crypto_string[3] = "̥͇̯̤̲Ý̠̤̺o̲̦̻̘̣̟͔ų͈̳̣'͈̪̖̹͖̝r̘͙͚ȩ̯͕̙ ̸ģ͙̞͇̳ơ̼i͈̘̱̣n̘̗͓̮̮̗̟͠g͞ ̙͉̫͡t̗̫͕̹̕o̢ ͚͕̲̠̠̙͙͟d͏̯i͎̝̱͎̰é̬̹ ̬̙̙h̵͓̟ere̷͍̺͈.̞͉ͅ";
crypto_string[4] = "̢̪Ṉ̛͎̞̲o̮̫̥̬ ̭̣m̹̺̭̳̜̯ͅo̬̱r̯̲̥͝ͅe҉̫̖͇ ̤ga̝͞mè̮s̮̘̟̭̯.̤̜̜̤͍̭";
state_transition = 0;
state_button = 1;
instance_create(x - 30, y - 45, obj_breakroom103_keypad_button_1);
instance_create(x, y - 45, obj_breakroom103_keypad_button_2);
instance_create(x + 30, y - 45, obj_breakroom103_keypad_button_3);
instance_create(x - 30, y - 15, obj_breakroom103_keypad_button_4);
instance_create(x, y - 15, obj_breakroom103_keypad_button_5);
instance_create(x + 30, y - 15, obj_breakroom103_keypad_button_6);
instance_create(x - 30, y + 15, obj_breakroom103_keypad_button_7);
instance_create(x, y + 15, obj_breakroom103_keypad_button_8);
instance_create(x + 30, y + 15, obj_breakroom103_keypad_button_9);
instance_create(x + 15, y + 45, obj_breakroom103_keypad_button_enter);
state_transition = 1;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>crypto_solved = 1;

if (instance_exists(obj_breakroom103_keypad))
{
    with (obj_breakroom103_keypad)
        sprite_index = spr_office_keypad_active;
}

if (instance_exists(obj_breakroom103_music))
{
    with (obj_breakroom103_music)
        alarm[2] = 1;
}

if (global.storyline_array[123] != 3)
{
    if (instance_exists(obj_talker_parent))
    {
        with (obj_talker_parent)
            instance_destroy();
    }
    
    if (instance_exists(obj_breakroom103_doorblocker))
    {
        with (obj_breakroom103_doorblocker)
            instance_destroy();
    }
}
else
{
    for (xx = 1; xx &lt;= 50; xx++)
    {
        global.dialog_array[xx, 1] = global.dialog_array[43, 1];
        global.dialog_array[xx, 2] = 0;
    }
    
    if (instance_exists(obj_breakroom103_talker_papers1))
    {
        with (obj_breakroom103_talker_papers1)
            instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_alpha &gt; 0)
{
    image_alpha -= 0.05;
    color_slice = 255 - (image_alpha * 255);
    color_whole = make_color_rgb(color_slice, color_slice, color_slice);
    alarm[1] = 1;
}
else
{
    for (xx = 1; xx &lt; 9; xx++)
    {
        var selected_button = asset_get_index("obj_breakroom103_keypad_button_" + string(xx));
        
        if (instance_exists(selected_button))
        {
            with (selected_button)
                instance_destroy();
        }
    }
    
    if (instance_exists(obj_breakroom103_keypad_button_enter))
    {
        with (obj_breakroom103_keypad_button_enter)
            instance_destroy();
    }
    
    global.player_frozen = 0;
    
    if (crypto_solved == 1)
    {
        if (instance_exists(obj_view))
        {
            with (obj_view)
                shader_active = 1;
        }
    }
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_alpha &lt; 1)
{
    image_alpha += 0.025;
    color_slice = 255 - (image_alpha * 255);
    color_whole = make_color_rgb(color_slice, color_slice, color_slice);
    alarm[0] = 1;
}
else
{
    state_transition = 0;
    
    if (global.gamepad_connected == 0)
        global.cursor_active = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gamepad_connected == 1)
{
    for (var xx = 1; xx &lt;= 9; xx++)
    {
        var selected_button = asset_get_index("obj_breakroom103_keypad_button_" + string(xx));
        
        if (instance_exists(selected_button))
            selected_button.activated = 0;
    }
    
    if (instance_exists(obj_breakroom103_keypad_button_enter))
        obj_breakroom103_keypad_button_enter.activated = 0;
    
    if (state_button != 10)
    {
        var selected_button = asset_get_index("obj_breakroom103_keypad_button_" + string(state_button));
        
        if (instance_exists(selected_button))
            selected_button.activated = 1;
    }
    else if (instance_exists(obj_breakroom103_keypad_button_enter))
    {
        obj_breakroom103_keypad_button_enter.activated = 1;
    }
    
    if (alarm[2] == -1)
    {
        if (global.up_key)
        {
            if (state_button &gt; 3 &amp;&amp; state_button != 10)
                state_button -= 3;
            else if (state_button == 10)
                state_button = 9;
            
            alarm[2] = room_speed * 0.1;
        }
        
        if (global.down_key)
        {
            if (state_button &lt; 7)
                state_button += 3;
            else
                state_button = 10;
            
            alarm[2] = room_speed * 0.1;
        }
        
        if (global.left_key)
        {
            if (state_button != 1)
                state_button -= 1;
            else
                state_button = 10;
            
            alarm[2] = room_speed * 0.1;
        }
        
        if (global.right_key)
        {
            if (state_button != 10)
                state_button += 1;
            else
                state_button = 1;
            
            alarm[2] = room_speed * 0.1;
        }
    }
}

if (state_transition == 0)
{
    if (global.accept_key)
    {
        for (var xx = 1; xx &lt;= 9; xx++)
        {
            var selected_button = asset_get_index("obj_breakroom103_keypad_button_" + string(xx));
            
            if (instance_exists(selected_button))
            {
                if (selected_button.activated == 1)
                {
                    if (crypto_step &lt;= crypto_max)
                    {
                        crypto_step += 1;
                        crypto_presses += string(xx);
                    }
                    
                    with (selected_button)
                    {
                        image_index = 1;
                        alarm[0] = room_speed * 0.25;
                    }
                    
                    var sound_mod = xx * 0.075;
                    var sound_pit = 0.7 + sound_mod;
                    scr_sound_play(83, 0.3, sound_pit, 0);
                }
            }
        }
        
        if (instance_exists(obj_breakroom103_keypad_button_enter))
        {
            if (obj_breakroom103_keypad_button_enter.activated == 1)
            {
                with (obj_breakroom103_keypad_button_enter)
                {
                    image_index = 1;
                    alarm[0] = room_speed * 0.25;
                }
                
                if (crypto_presses == crypto_win)
                {
                    var hint_total = 0;
                    var hint_iterator = 0;
                    
                    for (hint_iterator = 0; hint_iterator &lt; 4; hint_iterator++)
                    {
                        if (global.storyline_array[129 + hint_iterator] == 1)
                            hint_total += 1;
                    }
                    
                    if (hint_total == 4)
                    {
                        scr_sound_play(85, 0.3, 1, 0);
                        global.storyline_array[123] = 1;
                        alarm[3] = 1;
                    }
                    else
                    {
                        scr_sound_play(84, 0.3, 1, 0);
                        global.storyline_array[123] = 3;
                        alarm[3] = 1;
                    }
                }
                else if (crypto_presses == crypto_loss)
                {
                    if (global.storyline_array[118] == 1)
                    {
                        scr_sound_play(85, 0.3, 1, 0);
                        global.storyline_array[123] = 2;
                        alarm[3] = 1;
                    }
                    else
                    {
                        scr_sound_play(84, 0.3, 1, 0);
                        global.storyline_array[123] = 3;
                        alarm[3] = 1;
                    }
                }
                else if (crypto_presses == crypto_secret)
                {
                    scr_sound_play(115, 0.2, 1, 0);
                    global.storyline_array[124] = 1;
                    global.language_known = 2;
                    save_game();
                    var crypto_int = 0;
                    var array_length = array_length_1d(crypto_string);
                    crypto_file = file_text_open_write("YOU.FOOL");
                    
                    for (crypto_int = 0; crypto_int &lt; array_length; crypto_int++)
                        file_text_write_string(crypto_file, crypto_string[crypto_int]);
                    
                    file_text_close(crypto_file);
                }
                else
                {
                    scr_sound_play(84, 0.3, 1, 0);
                }
                
                crypto_presses = "";
                state_transition = 1;
                
                if (global.gamepad_connected == 0)
                    global.cursor_active = 0;
                
                alarm[1] = 1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(image_alpha);
draw_set_blend_mode_ext(9, bm_zero);
draw_ellipse_color(x - 400, y - 400, x + 400, y + 400, color_whole, c_white, 0);
draw_set_blend_mode(bm_normal);
draw_set_alpha(1);
draw_set_alpha(image_alpha);
draw_self();
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints />
</object>
