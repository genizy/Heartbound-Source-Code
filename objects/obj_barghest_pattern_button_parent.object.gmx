<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_open = asset_get_index("spr_" + string_delete(object_get_name(object_index), 1, 4) + "_open");
sprite_closed = asset_get_index("spr_" + string_delete(object_get_name(object_index), 1, 4) + "_closed");
sprite_opening = asset_get_index("spr_" + string_delete(object_get_name(object_index), 1, 4) + "_opening");
sprite_closing = asset_get_index("spr_" + string_delete(object_get_name(object_index), 1, 4) + "_closing");
sprite_fail = asset_get_index("spr_" + string_delete(object_get_name(object_index), 1, 4) + "_fail");
sprite_index = sprite_closed;
image_speed = 0.25;
button_allowed = 0;
button_alpha = 1;
stay_open = 1;
attack_fired = 0;
button_number = 0;
button_fail = 0;
position_step = 1;
position_set = 0;
object_selected = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (position_step == 1)
{
    if (position_set == 0)
    {
        if (y &gt; target_position)
        {
            speed = 0;
            y = target_position;
            position_set = 1;
        }
    }
}
else if (position_step == 2)
{
    if (y &lt; target_position)
        instance_destroy();
}

if (global.gamepad_connected == 0)
{
    if (global.accept_key)
    {
        if (object_selected == 1)
        {
            if (button_allowed == 1)
            {
                with (obj_barghest_pattern_game)
                {
                    if (other.button_number != 0)
                    {
                        if (other.button_number == pattern_array[pattern_current])
                        {
                            pattern_current += 1;
                            
                            if (pattern_current == pattern_steps)
                            {
                                alarm[4] = 0;
                                alarm[5] = 0;
                                alarm[2] = room_speed * 0.5;
                                
                                with (obj_barghest_pattern_button_parent)
                                    button_allowed = 0;
                            }
                            
                            var button_sound = asset_get_index("snd_barghest_pattern_eye_" + string(other.button_number));
                            scr_sound_play(button_sound, 0.25, 2, 0);
                            other.sprite_index = other.sprite_closing;
                            
                            if (global.storyline_array[23] == 1)
                            {
                                global.enemy_hp_check -= 2;
                                scr_damage_target(2, 23, other.x, other.y);
                            }
                            else
                            {
                                global.enemy_hp_check -= 1;
                                scr_damage_target(1, 23, other.x, other.y);
                            }
                        }
                        else
                        {
                            scr_sound_play(169, 0.3, 2, 0);
                            
                            with (obj_barghest_pattern_button_parent)
                            {
                                if (sprite_index != sprite_open)
                                {
                                    sprite_index = sprite_opening;
                                    stay_open = 1;
                                }
                                
                                button_allowed = 0;
                                button_alpha = 0;
                                button_fail = 1;
                            }
                            
                            alarm[4] = 0;
                            alarm[5] = 0;
                            alarm[2] = room_speed;
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (stay_open == 1)
{
    if (sprite_index == sprite_opening)
    {
        sprite_index = sprite_open;
        
        if (button_number == 0)
        {
            if (button_fail == 1)
            {
                if (attack_fired == 0)
                {
                    attack_fired = 1;
                    instance_create(x, y, obj_barghest_pattern_attack);
                    audio_stop_sound(snd_barghest_pattern_charge);
                    scr_sound_play(170, 0.3, 1, 1);
                }
            }
        }
    }
    else if (sprite_index == sprite_closing)
    {
        sprite_index = sprite_opening;
    }
}
else if (sprite_index == sprite_closing)
{
    sprite_index = sprite_closed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gamepad_connected == 0)
{
    if (position_set == 1)
    {
        if (button_number != 0)
        {
            if (button_allowed == 1)
            {
                if (collision_circle(mouse_x, mouse_y, 3, id, 1, 0))
                {
                    d3d_set_fog(true, c_red, 0, 0);
                    draw_sprite_ext(sprite_index, image_index, round(x) - 2, round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_sprite_ext(sprite_index, image_index, round(x) + 2, round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_sprite_ext(sprite_index, image_index, round(x), round(y) - 2, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_sprite_ext(sprite_index, image_index, round(x), round(y) + 2, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_sprite_ext(sprite_index, image_index, round(x) + 1, round(y) + 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_sprite_ext(sprite_index, image_index, round(x) + 1, round(y) - 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_sprite_ext(sprite_index, image_index, round(x) - 1, round(y) + 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_sprite_ext(sprite_index, image_index, round(x) - 1, round(y) - 1, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    d3d_set_fog(false, c_red, 0, 0);
                    object_selected = 1;
                }
                else
                {
                    object_selected = 0;
                }
            }
        }
    }
}

if (surface_exists(global.arena_surface))
{
    surface_set_target(global.arena_surface);
    draw_clear_alpha(c_black, 0);
    
    if (button_number == 0)
    {
        draw_sprite_ext(sprite_base, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    }
    else
    {
        draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    }
    
    if (button_fail == 1)
    {
        if (button_number == 0)
        {
            draw_sprite_ext(sprite_base, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            draw_sprite_ext(sprite_index, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        }
        else
        {
            draw_sprite_ext(sprite_fail, image_index, round(x) - global.surface_offset_x, round(y) - global.surface_offset_y, image_xscale, image_yscale, image_angle, image_blend, button_alpha);
        }
        
        if (button_alpha &lt; 0.75)
            button_alpha += 0.03;
    }
    
    surface_reset_target();
    draw_surface(global.arena_surface, global.surface_offset_x, global.surface_offset_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints />
</object>
