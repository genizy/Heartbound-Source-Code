<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>letter_count = 0;
count = 1;
textbox_sprite = 298;
text_location = 0;
text_flipped = 0;
text_border = 1;
text_timer = 0;
text_move = 0;
text_skip = 1;
text_fade = 0;
textbox_x = x;
textbox_y = y;
cur_font = 301;
letter_offset_x = sprite_get_width(cur_font);
letter_offset_y = sprite_get_height(cur_font);
letter_padding_x = 8;
letter_padding_y = 7;
letter_height = 1;
letter_width = 1;
letter_row = 0;
anim_talky = 0.1;
cur_talky = 290;
anim_arrow = 0.1;
cur_arrow = 299;
cur_message = 1;
base_message = "";
cur_voice = 0;
voice_vol = 0.1;
cur_char = "";
active_voice = "";
active_emotion = "";
active_speed = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>end_dialog();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.conv_talking == 1)
{
    message_len = string_length(global.message_text);
    
    if (textbox_y != y)
    {
        if (instance_exists(obj_textbox_border))
        {
            with (obj_textbox_border)
                instance_destroy();
        }
        
        if (instance_exists(obj_talky))
        {
            with (obj_talky)
                instance_destroy();
        }
        
        if (instance_exists(obj_con_arrow))
        {
            with (obj_con_arrow)
                instance_destroy();
        }
    }
    
    textbox_x = x;
    textbox_y = y;
    
    if (!instance_exists(obj_textbox_border))
    {
        if (text_border == 1)
            new_textbox = instance_create(textbox_x, textbox_y, obj_textbox_border);
    }
    
    if (!instance_exists(obj_talky))
    {
        if (text_flipped == 1)
        {
            var talky_x = floor(((textbox_x - (sprite_get_width(textbox_sprite) / 2)) + (sprite_get_width(cur_talky) / 2)) - 7);
            var talky_y = floor(((textbox_y + (sprite_get_height(textbox_sprite) / 2)) - (sprite_get_height(cur_talky) / 2)) + 8);
            new_talky = instance_create(talky_x, talky_y, obj_talky);
            new_talky.image_xscale = -1;
        }
        else
        {
            var talky_x = floor(((textbox_x + (sprite_get_width(textbox_sprite) / 2)) - (sprite_get_width(cur_talky) / 2)) + 7);
            var talky_y = floor(((textbox_y + (sprite_get_height(textbox_sprite) / 2)) - (sprite_get_height(cur_talky) / 2)) + 8);
            new_talky = instance_create(talky_x, talky_y, obj_talky);
        }
    }
    
    if (!instance_exists(obj_con_arrow))
    {
        if (text_border == 1)
        {
            if (text_location == 4 || text_location == 7 || text_location == 9)
            {
                var con_arrow_x = floor(textbox_x - (sprite_get_width(textbox_sprite) / 2) - sprite_get_width(cur_arrow));
                var con_arrow_y = floor((textbox_y + (sprite_get_height(textbox_sprite) / 2)) - (sprite_get_height(cur_arrow) / 2));
                new_con_arrow = instance_create(con_arrow_x, con_arrow_y, obj_con_arrow);
                
                with (new_con_arrow)
                {
                    image_index = 0;
                    image_speed = 0;
                    image_xscale = -1;
                }
            }
            else
            {
                var con_arrow_x = floor(textbox_x + (sprite_get_width(textbox_sprite) / 2) + sprite_get_width(cur_arrow));
                var con_arrow_y = floor((textbox_y + (sprite_get_height(textbox_sprite) / 2)) - (sprite_get_height(cur_arrow) / 2));
                new_con_arrow = instance_create(con_arrow_x, con_arrow_y, obj_con_arrow);
                
                with (new_con_arrow)
                {
                    image_index = 0;
                    image_speed = 0;
                }
            }
        }
    }
    
    if (count &lt;= message_len)
    {
        if (alarm[0] == -1)
        {
            cur_char = string_char_at(global.message_text, count);
            alt_char = string_char_at(global.altmessage_text, count);
            
            if (cur_char == "#")
            {
                letter_count = 0;
                letter_row++;
            }
            
            if (cur_char != "#")
            {
                cur_language = global.message_language_list[count];
                
                switch (cur_language)
                {
                    case 1:
                        cur_font = 301;
                        letter_offset_x = sprite_get_width(cur_font);
                        letter_offset_y = sprite_get_height(cur_font);
                        global.language_map = global.letter_map;
                        break;
                    
                    case 2:
                        cur_font = 302;
                        letter_offset_x = sprite_get_width(cur_font);
                        letter_offset_y = sprite_get_height(cur_font);
                        global.language_map = global.glyph_map;
                        break;
                    
                    case 3:
                        cur_font = 303;
                        letter_offset_x = sprite_get_width(cur_font);
                        letter_offset_y = sprite_get_height(cur_font);
                        global.language_map = global.glyph_map;
                        break;
                }
                
                var letter_location_x, letter_location_y;
                
                if (text_flipped == 1)
                {
                    letter_location_x = floor((((textbox_x - (sprite_get_width(textbox_sprite) / 2)) + (letter_offset_x * letter_count)) - letter_padding_x) + sprite_get_width(cur_talky));
                    letter_location_y = floor((textbox_y - (sprite_get_height(textbox_sprite) / 2)) + (letter_offset_y * letter_row) + letter_padding_y);
                }
                else
                {
                    letter_location_x = floor((textbox_x - (sprite_get_width(textbox_sprite) / 2)) + (letter_offset_x * letter_count) + letter_padding_x);
                    letter_location_y = floor((textbox_y - (sprite_get_height(textbox_sprite) / 2)) + (letter_offset_y * letter_row) + letter_padding_y);
                }
                
                cur_key = ds_map_find_value(global.language_map, cur_char);
                alt_key = ds_map_find_value(global.language_map, alt_char);
                cur_spinning = global.message_spinning_list[count];
                active_color = global.message_color_list[count];
                new_letter = instance_create(letter_location_x, letter_location_y, obj_letter);
                active_speed = global.message_speed_list[count];
                alarm[0] = active_speed;
                active_emotion = global.message_emotion_list[count];
                active_voice = global.message_voice_list[count];
                
                with (new_letter)
                {
                    text_fade = other.text_fade;
                    text_fly = other.text_fly;
                    
                    if (text_fly != 0)
                        alarm[3] = 1;
                    
                    cur_key = other.cur_key;
                    image_index = cur_key;
                    sprite_index = other.cur_font;
                    image_blend = other.active_color;
                    
                    if (other.active_color == 100000000)
                    {
                        color = (color_shift * other.letter_count * other.active_speed) % 255;
                        image_blend = make_color_hsv(color, 255, 255);
                        alarm[2] = rainbow_timer;
                    }
                    
                    if (other.cur_spinning == 1)
                    {
                        if (other.cur_char != " ")
                        {
                            spin_forever = 1;
                            image_speed = random_range(1, 2);
                        }
                    }
                }
                
                if (alt_char != "_")
                {
                    with (new_letter)
                    {
                        alt_key = other.alt_key;
                        var timer_amount = (room_speed * random_range(0.6, 0.7)) - (0.05 * other.count);
                        timer_amount = clamp(timer_amount, 20, 60);
                        alarm[0] = timer_amount;
                    }
                }
                
                if (cur_language != 1)
                {
                    translate_message = 0;
                    
                    if (cur_font == 303)
                    {
                        if (global.language_known &gt;= 1)
                            translate_message = 1;
                    }
                    
                    if (cur_font == 302)
                    {
                        if (global.language_known == 2)
                            translate_message = 1;
                    }
                    
                    if (translate_message == 1)
                    {
                        with (new_letter)
                        {
                            alt_key = other.cur_key;
                            var timer_amount = (room_speed * random_range(0.6, 0.7)) - (0.05 * other.count);
                            timer_amount = clamp(timer_amount, 20, 60);
                            alarm[0] = timer_amount;
                            translate_message = 1;
                        }
                    }
                }
                
                if (string(active_voice) != " ")
                    scr_sound_play(active_voice, random_range(voice_vol - 0.03, voice_vol), random_range(0.95, 1.05), 0);
                
                with (new_talky)
                {
                    sprite_index = other.active_emotion;
                    image_speed = other.anim_talky;
                }
                
                letter_count++;
            }
            
            count++;
        }
        
        if (text_skip == 1)
        {
            if (global.cancel_key)
            {
                while (count &lt;= message_len)
                {
                    cur_char = string_char_at(global.message_text, count);
                    alt_char = string_char_at(global.altmessage_text, count);
                    
                    if (cur_char == "#")
                    {
                        letter_count = 0;
                        letter_row++;
                    }
                    else if (cur_char != "#")
                    {
                        cur_language = global.message_language_list[count];
                        
                        switch (cur_language)
                        {
                            case 1:
                                cur_font = 301;
                                letter_offset_x = sprite_get_width(cur_font);
                                letter_offset_y = sprite_get_height(cur_font);
                                global.language_map = global.letter_map;
                                break;
                            
                            case 2:
                                cur_font = 302;
                                letter_offset_x = sprite_get_width(cur_font);
                                letter_offset_y = sprite_get_height(cur_font);
                                global.language_map = global.glyph_map;
                                break;
                            
                            case 3:
                                cur_font = 303;
                                letter_offset_x = sprite_get_width(cur_font);
                                letter_offset_y = sprite_get_height(cur_font);
                                global.language_map = global.glyph_map;
                                break;
                        }
                        
                        var letter_location_x, letter_location_y;
                        
                        if (text_flipped == 1)
                        {
                            letter_location_x = floor((((textbox_x - (sprite_get_width(textbox_sprite) / 2)) + (letter_offset_x * letter_count)) - letter_padding_x) + sprite_get_width(cur_talky));
                            letter_location_y = floor((textbox_y - (sprite_get_height(textbox_sprite) / 2)) + (letter_offset_y * letter_row) + letter_padding_y);
                        }
                        else
                        {
                            letter_location_x = floor((textbox_x - (sprite_get_width(textbox_sprite) / 2)) + (letter_offset_x * letter_count) + letter_padding_x);
                            letter_location_y = floor((textbox_y - (sprite_get_height(textbox_sprite) / 2)) + (letter_offset_y * letter_row) + letter_padding_y);
                        }
                        
                        cur_key = ds_map_find_value(global.language_map, cur_char);
                        alt_key = ds_map_find_value(global.language_map, alt_char);
                        cur_spinning = global.message_spinning_list[count];
                        active_color = global.message_color_list[count];
                        new_letter = instance_create(letter_location_x, letter_location_y, obj_letter);
                        translate_message = 0;
                        
                        if (cur_language != 1)
                        {
                            if (cur_font == 303)
                            {
                                if (global.language_known &gt;= 1)
                                    translate_message = 1;
                            }
                            
                            if (cur_font == 302)
                            {
                                if (global.language_known == 2)
                                    translate_message = 1;
                            }
                        }
                        
                        with (new_letter)
                        {
                            translate_message = other.translate_message;
                            text_fade = other.text_fade;
                            text_fly = other.text_fly;
                            
                            if (text_fly != 0)
                                alarm[3] = 1;
                            
                            image_index = other.cur_key;
                            sprite_index = other.cur_font;
                            image_blend = other.active_color;
                            
                            if (other.alt_char != "_")
                                alt_key = other.alt_key;
                            else
                                cur_key = other.cur_key;
                            
                            if (other.active_color == 100000000)
                            {
                                color = (color_shift * other.letter_count) % 255;
                                image_blend = make_color_hsv(color, 255, 255);
                                alarm[2] = rainbow_timer;
                            }
                            
                            if (other.cur_spinning == 1)
                            {
                                if (other.cur_char != " ")
                                {
                                    spin_forever = 1;
                                    image_speed = random_range(1, 2);
                                }
                                else
                                {
                                    spin_forever = 0;
                                }
                            }
                        }
                        
                        active_emotion = global.message_emotion_list[count];
                        
                        with (new_talky)
                        {
                            sprite_index = other.active_emotion;
                            image_speed = other.anim_talky;
                        }
                        
                        letter_count++;
                    }
                    
                    count++;
                }
                
                with (obj_letter)
                {
                    if (alarm[0] != 0 || alarm[1] != 0)
                    {
                        if (spin_forever == 0)
                            image_speed = 0;
                        
                        alarm[0] = 0;
                        alarm[1] = 0;
                        
                        if (alt_key != -1)
                            image_index = alt_key;
                        else
                            image_index = cur_key;
                        
                        if (translate_message == 1)
                            sprite_index = spr_font_pixel;
                    }
                }
            }
        }
    }
    
    if (count &gt; message_len &amp;&amp; global.text_complete == 0)
    {
        if (global.menu_active == 1 &amp;&amp; global.current_menu == 3)
        {
            if (!instance_exists(obj_button_dialog_1))
            {
                var button_location_x = floor((textbox_x - (sprite_get_width(textbox_sprite) / 2)) + letter_padding_x) + 5;
                var button_location_y = floor((textbox_y - (sprite_get_height(textbox_sprite) / 2)) + (letter_offset_y * 1) + letter_padding_y);
                instance_create(button_location_x, button_location_y, obj_button_dialog_1);
            }
            
            if (!instance_exists(obj_button_dialog_2))
            {
                var button_location_x = floor((textbox_x - (sprite_get_width(textbox_sprite) / 2)) + letter_padding_x) + 5;
                var button_location_y = floor((textbox_y - (sprite_get_height(textbox_sprite) / 2)) + (letter_offset_y * 2) + letter_padding_y);
                instance_create(button_location_x, button_location_y, obj_button_dialog_2);
            }
        }
        
        if (instance_exists(obj_con_arrow))
        {
            with (obj_con_arrow)
                image_speed = other.anim_arrow;
        }
        
        if (text_timer != 0)
            alarm[1] = text_timer;
        
        global.message_speed_list = 0;
        global.message_voice_list = 0;
        global.message_emotion_list = 0;
        global.message_color_list = 0;
        global.message_text = "";
        global.altmessage_text = "";
        var letter_location_x = 0;
        var letter_location_y = 0;
        letter_row = 0;
        letter_count = 0;
        count = 1;
        global.text_complete = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints />
</object>
