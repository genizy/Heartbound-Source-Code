<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>effect_paused = 0;
effect_indoors = 0;
effect_selected = -1;
effect_active = 0;

for (xx = 1; xx &lt; 8; xx++)
    effect_sound[xx] = -1;

for (xx = 1; xx &lt; 8; xx++)
    background_sound[xx] = -1;

for (xx = 1; xx &lt; 10; xx++)
    time_remaining[xx] = -1;

first_lightning = 0;

if (room == home_bedroom)
{
    if (global.storyline_array[5] == 0)
        first_lightning = 1;
}

if (room == global_bedhead)
    first_lightning = 1;

if (global.storyline_array[31] == 1)
{
    if (global.storyline_array[32] == 0)
        first_lightning = 1;
}

effect_sound[1] = 117;
background_sound[1] = 118;
background_sound[2] = 119;
background_sound[3] = 121;
background_sound[4] = 120;
effect_indoors = ds_map_find_value(global.home_environment_map, room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(effect_sound[1]);
audio_stop_sound(background_sound[1]);
audio_stop_sound(background_sound[2]);
audio_stop_sound(background_sound[3]);
audio_stop_sound(background_sound[4]);

if (instance_exists(obj_effect_rain))
{
    with (obj_effect_rain)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>effect_active = 0;

if (alarm[0] == -1)
{
    if (effect_paused == 0)
        alarm[0] = room_speed * random_range(15, 30);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>effect_active = 1;

if (first_lightning == 1)
{
    if (audio_is_playing(snd_whitefade))
        audio_sound_gain(snd_whitefade, 0, 100);
    
    scr_sound_play(effect_sound[1], 0.9, 1, 0);
    first_lightning = 0;
}
else if (global.storyline_array[31] == 0 || room == global_bedhead)
{
    if (effect_indoors == 0)
        scr_sound_play(effect_sound[1], random_range(0.9, 1), random_range(0.8, 1), 0);
    else if (effect_indoors == 1)
        scr_sound_play(effect_sound[1], random_range(0.1, 0.3), random_range(0.8, 0.9), 0);
    else if (effect_indoors == 2)
        scr_sound_play(effect_sound[1], random_range(0.5, 0.7), random_range(0.8, 0.9), 0);
    else if (effect_indoors == 3)
        scr_sound_play(effect_sound[1], random_range(0.1, 0.3), random_range(0.8, 0.9), 0);
    else if (effect_indoors == 4)
        scr_sound_play(effect_sound[1], random_range(0.5, 0.7), random_range(0.8, 0.9), 0);
}
else if (effect_indoors == 0)
{
    scr_sound_play(effect_sound[1], 0.015, random_range(0.8, 1), 0);
}
else if (effect_indoors == 1)
{
    scr_sound_play(effect_sound[1], 0.025, random_range(0.8, 0.9), 0);
}
else if (effect_indoors == 2)
{
    scr_sound_play(effect_sound[1], 0.035, random_range(0.8, 0.9), 0);
}
else if (effect_indoors == 3)
{
    scr_sound_play(effect_sound[1], 0.045, random_range(0.8, 0.9), 0);
}
else if (effect_indoors == 4)
{
    scr_sound_play(effect_sound[1], 0.05, random_range(0.8, 0.9), 0);
}
else if (effect_indoors == 5)
{
    if (global.combat_active == 0)
        scr_sound_play(effect_sound[1], random_range(0.9, 1), random_range(0.8, 1), 0);
}

alarm[1] = room_speed * random_range(0.75, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" ename="obj_gizmo_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>effect_indoors = ds_map_find_value(global.home_environment_map, room);

for (xx = 1; xx &lt; 8; xx++)
{
    if (background_sound[xx] != -1)
    {
        if (audio_is_playing(background_sound[xx]))
        {
        }
        else
        {
            scr_sound_play(background_sound[xx], 0, 0, 1);
        }
    }
}

if (effect_selected != effect_indoors)
{
    if (effect_indoors == 0 || effect_indoors == 5)
    {
        if (!instance_exists(obj_effect_rain))
            instance_create(x, y, obj_effect_rain);
    }
}

if (global.storyline_array[31] == 0 || room == global_bedhead)
{
    if (effect_indoors == 0)
    {
        audio_sound_gain(effect_sound[1], random_range(0.9, 1), 0);
        audio_sound_pitch(effect_sound[1], random_range(0.8, 1));
        audio_sound_gain(background_sound[1], 0.1, 0);
        audio_sound_pitch(background_sound[1], 1);
        audio_sound_gain(background_sound[2], 0, 0);
        audio_sound_pitch(background_sound[2], 1);
        audio_sound_gain(background_sound[3], 0.1, 0);
        audio_sound_pitch(background_sound[3], 1);
        audio_sound_gain(background_sound[4], 0.1, 0);
        audio_sound_pitch(background_sound[4], 1);
    }
    else if (effect_indoors == 1)
    {
        audio_sound_gain(effect_sound[1], random_range(0.1, 0.3), 0);
        audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
        audio_sound_gain(background_sound[1], 0.01, 0);
        audio_sound_pitch(background_sound[1], 0.8);
        audio_sound_gain(background_sound[2], 0.2, 0);
        audio_sound_pitch(background_sound[2], 1);
        audio_sound_gain(background_sound[3], 0, 0);
        audio_sound_pitch(background_sound[3], 1);
        audio_sound_gain(background_sound[4], 0, 0);
        audio_sound_pitch(background_sound[4], 1);
    }
    else if (effect_indoors == 2)
    {
        audio_sound_gain(effect_sound[1], random_range(0.5, 0.7), 0);
        audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
        audio_sound_gain(background_sound[1], 0.03, 0);
        audio_sound_pitch(background_sound[1], 0.9);
        audio_sound_gain(background_sound[2], 0.5, 0);
        audio_sound_pitch(background_sound[2], 1);
        audio_sound_gain(background_sound[3], 0, 0);
        audio_sound_pitch(background_sound[3], 1);
        audio_sound_gain(background_sound[4], 0, 0);
        audio_sound_pitch(background_sound[4], 1);
    }
    else if (effect_indoors == 3)
    {
        audio_sound_gain(effect_sound[1], random_range(0.1, 0.3), 0);
        audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
        audio_sound_gain(background_sound[1], 0.01, 0);
        audio_sound_pitch(background_sound[1], 0.8);
        audio_sound_gain(background_sound[2], 0.2, 0);
        audio_sound_pitch(background_sound[2], 1);
        audio_sound_gain(background_sound[3], 0, 0);
        audio_sound_pitch(background_sound[3], 1);
        audio_sound_gain(background_sound[4], 0, 0);
        audio_sound_pitch(background_sound[4], 1);
    }
    else if (effect_indoors == 4)
    {
        audio_sound_gain(effect_sound[1], random_range(0.5, 0.7), 0);
        audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
        audio_sound_gain(background_sound[1], 0.03, 0);
        audio_sound_pitch(background_sound[1], 0.9);
        audio_sound_gain(background_sound[2], 0.5, 0);
        audio_sound_pitch(background_sound[2], 1);
        audio_sound_gain(background_sound[3], 0, 0);
        audio_sound_pitch(background_sound[3], 1);
        audio_sound_gain(background_sound[4], 0, 0);
        audio_sound_pitch(background_sound[4], 1);
    }
}
else if (effect_indoors == 0)
{
    audio_sound_gain(effect_sound[1], 0.15, 0);
    audio_sound_pitch(effect_sound[1], random_range(0.8, 1));
    audio_sound_gain(background_sound[1], 0.015, 0);
    audio_sound_pitch(background_sound[1], 0.9);
    audio_sound_gain(background_sound[2], 0, 0);
    audio_sound_pitch(background_sound[2], 1);
    audio_sound_gain(background_sound[3], 0.005, 0);
    audio_sound_pitch(background_sound[3], 1);
    audio_sound_gain(background_sound[4], 0.005, 0);
    audio_sound_pitch(background_sound[4], 1);
}
else if (effect_indoors == 1)
{
    audio_sound_gain(effect_sound[1], 0.025, 0);
    audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
    audio_sound_gain(background_sound[1], 0.0025, 0);
    audio_sound_pitch(background_sound[1], 0.9);
    audio_sound_gain(background_sound[2], 0.025, 0);
    audio_sound_pitch(background_sound[2], 1);
    audio_sound_gain(background_sound[3], 0, 0);
    audio_sound_pitch(background_sound[3], 1);
    audio_sound_gain(background_sound[4], 0, 0);
    audio_sound_pitch(background_sound[4], 1);
}
else if (effect_indoors == 2)
{
    audio_sound_gain(effect_sound[1], 0.035, 0);
    audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
    audio_sound_gain(background_sound[1], 0.0035, 0);
    audio_sound_pitch(background_sound[1], 0.9);
    audio_sound_gain(background_sound[2], 0.035, 0);
    audio_sound_pitch(background_sound[2], 1);
    audio_sound_gain(background_sound[3], 0, 0);
    audio_sound_pitch(background_sound[3], 1);
    audio_sound_gain(background_sound[4], 0, 0);
    audio_sound_pitch(background_sound[4], 1);
}
else if (effect_indoors == 3)
{
    audio_sound_gain(effect_sound[1], 0.045, 0);
    audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
    audio_sound_gain(background_sound[1], 0.0045, 0);
    audio_sound_pitch(background_sound[1], 0.9);
    audio_sound_gain(background_sound[2], 0.045, 0);
    audio_sound_pitch(background_sound[2], 1);
    audio_sound_gain(background_sound[3], 0, 0);
    audio_sound_pitch(background_sound[3], 1);
    audio_sound_gain(background_sound[4], 0, 0);
    audio_sound_pitch(background_sound[4], 1);
}
else if (effect_indoors == 4)
{
    audio_sound_gain(effect_sound[1], 0.05, 0);
    audio_sound_pitch(effect_sound[1], random_range(0.8, 0.9));
    audio_sound_gain(background_sound[1], 0.005, 0);
    audio_sound_pitch(background_sound[1], 0.9);
    audio_sound_gain(background_sound[2], 0.05, 0);
    audio_sound_pitch(background_sound[2], 1);
    audio_sound_gain(background_sound[3], 0, 0);
    audio_sound_pitch(background_sound[3], 1);
    audio_sound_gain(background_sound[4], 0, 0);
    audio_sound_pitch(background_sound[4], 1);
}
else if (effect_indoors == 5)
{
    if (global.combat_active == 0)
    {
        audio_sound_gain(effect_sound[1], random_range(0.9, 1), 0);
        audio_sound_pitch(effect_sound[1], random_range(0.8, 1));
        audio_sound_gain(background_sound[1], 0.1, 0);
        audio_sound_pitch(background_sound[1], 1);
        audio_sound_gain(background_sound[2], 0, 0);
        audio_sound_pitch(background_sound[2], 1);
        audio_sound_gain(background_sound[3], 0.1, 0);
        audio_sound_pitch(background_sound[3], 1);
        audio_sound_gain(background_sound[4], 0.1, 0);
        audio_sound_pitch(background_sound[4], 1);
    }
}

effect_active = 0;

if (alarm[0] == -1)
{
    alarm[0] = room_speed * random_range(10, 20);
    
    if (first_lightning == 1)
        alarm[0] = room_speed * 0.5;
}

if (room == forest_barghest1)
{
    alarm[0] = 0;
    effect_paused = 1;
}
else if (room == forest_treepuzzle)
{
    alarm[0] = 0;
    alarm[1] = 0;
    effect_paused = 0;
}
else if (room != home_bedroom &amp;&amp; room != global_bedhead)
{
    alarm[0] = room_speed * random_range(15, 30);
    effect_paused = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints />
</object>
